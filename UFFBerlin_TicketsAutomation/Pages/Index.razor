@page "/"
@inject Data.GoogleDriveService GoogleDriveService
@inject Data.CSVService CSVService
@inject IConfiguration Configuration

<h3>Upload and Process CSV</h3>

<InputFile OnChange="HandleFileSelected" />

<br />
<button class="btn btn-primary" @onclick="ProcessCsv" disabled="@isProcessing">Process CSV and Sort Files</button>

<h4>Log</h4>
<textarea style="width: 100%; height: 200px;" readonly>@logContent</textarea>

<p>@statusMessage</p>

@code {
    private string statusMessage = "";
    private string logContent = "";
    private Stream csvStream;
    private bool isProcessing = false;

    private string destinationFolderId;
    private string sentEmailsFolderId;

    protected override void OnInitialized()
    {
        destinationFolderId = Configuration["GoogleApi:DestinationFolderId"];
        sentEmailsFolderId = Configuration["GoogleApi:SentEmailsFolderId"];
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        csvStream = file.OpenReadStream(); // This stream will be passed to the CSV service
    }

    private async Task ProcessCsv()
    {
        if (csvStream != null)
        {
            isProcessing = true;
            statusMessage = "Processing CSV...";
            logContent = "";

            // Log action to append to the log content
            Action<string> logAction = (message) =>
            {
                logContent += $"{DateTime.Now}: {message}\n";
                StateHasChanged();
            };

            // Process CSV and pass the log action for logging
            await CSVService.ExtractDataFromCsvAsync(csvStream, logAction);

            statusMessage = "CSV processing completed.";
        }
        else
        {
            statusMessage = "Please upload a CSV file.";
        }

        isProcessing = false;
        StateHasChanged();
    }
}
