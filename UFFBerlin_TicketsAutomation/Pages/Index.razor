@page "/"

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject Data.GoogleDriveService GoogleDriveService
@inject Data.CSVService CSVService
@inject Data.SettingsService SettingsService
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<h3>Upload and Process CSV</h3>

<div class="card info-card">
<p><strong>Raw tickets folder ID</strong> <small>(place the tickets here)</small>
    <a href="https://drive.google.com/drive/folders/@sourceFolderId" target="_blank">@sourceFolderId</a></p>
<p><strong>Prepared emails folder ID</strong> <small>(for tickets sorted by recipients)</small>
    <a href="https://drive.google.com/drive/folders/@destinationFolderId" target="_blank">@destinationFolderId</a></p>
</div>
<InputFile OnChange="HandleFileSelected" />

<br />
<button class="btn btn-primary" @onclick="ProcessCsv" disabled="@isProcessing">Process CSV and Sort Files</button>
<div style="margin: 10px 0">
    <strong> <span class="oi oi-warning" aria-hidden="true"></span>CSV with the guest list should be in following format:</strong><br />
    <div class="card info-card" style="margin: 0; padding: 5px 10px;">
        name@gmail.com,1<br />
        address@web.de,2
    </div>
    <div style="font-size:.75rem">(email and required ticket number, separated by comma)</div>
</div>
<h4>Log</h4>
<textarea style="width: 100%; height: 200px;" readonly>@logContent</textarea>

<p>@statusMessage</p>

<button class="btn btn-secondary" @onclick="DownloadLogFile" disabled="@string.IsNullOrEmpty(logContent)">Download Log</button>

@code {
    private string statusMessage = "";
    private string logContent = "";
    private Stream csvStream;
    private bool isProcessing = false;

    private string sourceFolderId;
    private string destinationFolderId;
    private string sentEmailsFolderId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/sign-in");
        }
        // Reload the latest settings to ensure changes are recognized without restarting
        SettingsService.ReloadSettings();

        // Bind the current folder IDs from the settings service
        sourceFolderId = SettingsService.Settings.SourceFolderId;
        destinationFolderId = SettingsService.Settings.DestinationFolderId;
        sentEmailsFolderId = SettingsService.Settings.ArchiveFolderId;
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        csvStream = file.OpenReadStream(); // This stream will be passed to the CSV service
    }

    private async Task ProcessCsv()
    {
        if (csvStream != null)
        {
            isProcessing = true;
            statusMessage = "Processing CSV...";
            logContent = "";

            try
            {
                // Log action to append to the log content
                Action<string> logAction = (message) =>
                {
                    logContent += $"{DateTime.Now}: {message}\n";
                    StateHasChanged();
                };

                // Process CSV and pass the log action for logging
                await CSVService.ExtractDataFromCsvAsync(csvStream, logAction);

                statusMessage = "CSV processing completed.";
            }
            catch (Exception ex)
            {
                statusMessage = $"Error: {ex.Message}";
            }
        }
        else
        {
            statusMessage = "Please upload a CSV file.";
        }

        isProcessing = false;
        StateHasChanged();
    }

    private async Task DownloadLogFile()
    {
        var currentDate = DateTime.Now.ToString("yyyyMMdd_HHmmss");
        var fileName = $"log_uffb_processCSV_{currentDate}.txt";

        // Trigger the download via JavaScript interop
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, logContent);
    }
}
