@page "/sign-in"
@layout MinimalLayout

@using UFFBerlin_TicketsAutomation.Data.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GoogleAuthorizationService GoogleAuthorizationService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Sign In</h3>

@if (!isSignedIn)
{
    <button class="btn btn-primary" @onclick="HandleSignIn"><span class="oi oi-account-login" aria-hidden="true"></span> Sign In with Google</button>
}
else
{
    <p>You are already signed in. Redirecting...</p>
}

@code {
    private bool isSignedIn;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var userToken = HttpContextAccessor.HttpContext?.Session.GetString("user_access_token");

            isSignedIn = user.Identity != null && user.Identity.IsAuthenticated && !string.IsNullOrEmpty(userToken);

            if (isSignedIn)
            {
                Navigation.NavigateTo("/");
                return;
            }
        }
    }

    private async Task HandleSignIn()
    {
        //await GoogleAuthorizationService.GetGoogleCredentialAsync();
        Navigation.NavigateTo("api/auth/signin", forceLoad: true);
        //Navigation.NavigateTo("/");  // Redirect after sign-in
    }
}
